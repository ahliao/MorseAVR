
MorseAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0000036e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000972  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000328  00000000  00000000  0000152f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c5  00000000  00000000  00001857  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000168  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000429  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  8e:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init>:
	return 0;	// Should never run
}

void init(void) {
	//Initialize LCD module
	LCDInit(LS_BLINK|LS_ULINE);
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 22 01 	call	0x244	; 0x244 <LCDInit>
	
	// Set PORTB to input
	BUTTON_PORT &= ~(1 << BUTTON_POS);
  9c:	21 98       	cbi	0x04, 1	; 4
  9e:	08 95       	ret

000000a0 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  a0:	8a b1       	in	r24, 0x0a	; 10
  a2:	80 7f       	andi	r24, 0xF0	; 240
  a4:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  a6:	5f 9a       	sbi	0x0b, 7	; 11
	CLEAR_RS();		//Read status
  a8:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCDBusyLoop+0xc>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  ae:	5e 9a       	sbi	0x0b, 6	; 11
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCDBusyLoop+0x12>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  b4:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
  b6:	82 95       	swap	r24
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCDBusyLoop+0x1c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  be:	5e 98       	cbi	0x0b, 6	; 11
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCDBusyLoop+0x22>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  c8:	5e 9a       	sbi	0x0b, 6	; 11
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCDBusyLoop+0x2c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  ce:	99 b1       	in	r25, 0x09	; 9
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCDBusyLoop+0x32>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  d4:	5e 98       	cbi	0x0b, 6	; 11
  d6:	92 e0       	ldi	r25, 0x02	; 2
  d8:	9a 95       	dec	r25
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCDBusyLoop+0x38>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
  de:	87 fd       	sbrc	r24, 7
  e0:	e6 cf       	rjmp	.-52     	; 0xae <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
  e2:	5f 98       	cbi	0x0b, 7	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	8f 60       	ori	r24, 0x0F	; 15
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	08 95       	ret

000000ec <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  ec:	28 2f       	mov	r18, r24
  ee:	22 95       	swap	r18
  f0:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
  f2:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
  f4:	61 11       	cpse	r22, r1
  f6:	02 c0       	rjmp	.+4      	; 0xfc <LCDByte+0x10>
	CLEAR_RS();
  f8:	28 98       	cbi	0x05, 0	; 5
  fa:	01 c0       	rjmp	.+2      	; 0xfe <LCDByte+0x12>
else
	SET_RS();
  fc:	28 9a       	sbi	0x05, 0	; 5
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCDByte+0x14>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCDByte+0x16>

_delay_us(0.500);		//tAS

SET_E();
 102:	5e 9a       	sbi	0x0b, 6	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 104:	9b b1       	in	r25, 0x0b	; 11
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 10a:	9b b9       	out	0x0b, r25	; 11
 10c:	92 e0       	ldi	r25, 0x02	; 2
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <LCDByte+0x22>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCDByte+0x28>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 114:	5e 98       	cbi	0x0b, 6	; 11
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCDByte+0x2c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCDByte+0x32>

_delay_us(1);

//Send the lower nibble
SET_E();
 11e:	5e 9a       	sbi	0x0b, 6	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	98 2b       	or	r25, r24

LCD_DATA_PORT=temp;
 126:	9b b9       	out	0x0b, r25	; 11
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDByte+0x3e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCDByte+0x44>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 130:	5e 98       	cbi	0x0b, 6	; 11
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	9a 95       	dec	r25
 136:	f1 f7       	brne	.-4      	; 0x134 <LCDByte+0x48>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCDByte+0x4e>

_delay_us(1);			//tEL

LCDBusyLoop();
 13a:	0c 94 50 00 	jmp	0xa0	; 0xa0 <LCDBusyLoop>

0000013e <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 148:	19 c0       	rjmp	.+50     	; 0x17c <LCDWriteString+0x3e>
 {
 	//Custom Char Support
	if(*msg=='%')
 14a:	85 32       	cpi	r24, 0x25	; 37
 14c:	89 f4       	brne	.+34     	; 0x170 <LCDWriteString+0x32>
	{
		msg++;
 14e:	8e 01       	movw	r16, r28
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 158:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	08 f4       	brcc	.+2      	; 0x160 <LCDWriteString+0x22>
 15e:	05 c0       	rjmp	.+10     	; 0x16a <LCDWriteString+0x2c>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>
			LCDData(*msg);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>
 16e:	04 c0       	rjmp	.+8      	; 0x178 <LCDWriteString+0x3a>
		}
	}
	else
	{
		LCDData(*msg);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>
 176:	8e 01       	movw	r16, r28
	}
	msg++;
 178:	e8 01       	movw	r28, r16
 17a:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 17c:	88 81       	ld	r24, Y
 17e:	81 11       	cpse	r24, r1
 180:	e4 cf       	rjmp	.-56     	; 0x14a <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	00 d0       	rcall	.+0      	; 0x196 <LCDWriteInt+0xa>
 196:	00 d0       	rcall	.+0      	; 0x198 <LCDWriteInt+0xc>
 198:	1f 92       	push	r1
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 1a0:	fe 01       	movw	r30, r28
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	45 e0       	ldi	r20, 0x05	; 5
 1a6:	df 01       	movw	r26, r30
 1a8:	1d 92       	st	X+, r1
 1aa:	4a 95       	dec	r20
 1ac:	e9 f7       	brne	.-6      	; 0x1a8 <LCDWriteInt+0x1c>
 1ae:	fe 01       	movw	r30, r28
 1b0:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 1b2:	0a e0       	ldi	r16, 0x0A	; 10
 1b4:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <LCDWriteInt+0x36>
	{
	str[i]=val%10;
 1b8:	b8 01       	movw	r22, r16
 1ba:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
 1be:	82 93       	st	-Z, r24
	val=val/10;
 1c0:	cb 01       	movw	r24, r22

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	c9 f7       	brne	.-14     	; 0x1b8 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1c6:	2f 3f       	cpi	r18, 0xFF	; 255
 1c8:	bf ef       	ldi	r27, 0xFF	; 255
 1ca:	3b 07       	cpc	r19, r27
 1cc:	51 f4       	brne	.+20     	; 0x1e2 <LCDWriteInt+0x56>
 1ce:	fe 01       	movw	r30, r28
 1d0:	31 96       	adiw	r30, 0x01	; 1
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 1d2:	cf 01       	movw	r24, r30
 1d4:	8f 01       	movw	r16, r30
 1d6:	08 1b       	sub	r16, r24
 1d8:	19 0b       	sbc	r17, r25
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 1da:	21 91       	ld	r18, Z+
 1dc:	22 23       	and	r18, r18
 1de:	d1 f3       	breq	.-12     	; 0x1d4 <LCDWriteInt+0x48>
 1e0:	12 c0       	rjmp	.+36     	; 0x206 <LCDWriteInt+0x7a>
	else
		j=5-field_length;
 1e2:	05 e0       	ldi	r16, 0x05	; 5
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	02 1b       	sub	r16, r18
 1e8:	13 0b       	sbc	r17, r19
 1ea:	0d c0       	rjmp	.+26     	; 0x206 <LCDWriteInt+0x7a>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 1ec:	e1 e0       	ldi	r30, 0x01	; 1
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ec 0f       	add	r30, r28
 1f2:	fd 1f       	adc	r31, r29
 1f4:	e0 0f       	add	r30, r16
 1f6:	f1 1f       	adc	r31, r17
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 1f8:	80 81       	ld	r24, Z
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	80 5d       	subi	r24, 0xD0	; 208
 1fe:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	05 30       	cpi	r16, 0x05	; 5
 208:	11 05       	cpc	r17, r1
 20a:	84 f3       	brlt	.-32     	; 0x1ec <LCDWriteInt+0x60>
	{
	LCDData(48+str[i]);
	}
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 220:	84 31       	cpi	r24, 0x14	; 20
 222:	78 f4       	brcc	.+30     	; 0x242 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 224:	62 30       	cpi	r22, 0x02	; 2
 226:	31 f0       	breq	.+12     	; 0x234 <LCDGotoXY+0x14>
 228:	63 30       	cpi	r22, 0x03	; 3
 22a:	31 f0       	breq	.+12     	; 0x238 <LCDGotoXY+0x18>
 22c:	61 30       	cpi	r22, 0x01	; 1
 22e:	29 f4       	brne	.+10     	; 0x23a <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 230:	80 64       	ori	r24, 0x40	; 64
			break;
 232:	03 c0       	rjmp	.+6      	; 0x23a <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 234:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 236:	01 c0       	rjmp	.+2      	; 0x23a <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 238:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	0c 94 76 00 	jmp	0xec	; 0xec <LCDByte>
 242:	08 95       	ret

00000244 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	1f 92       	push	r1
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	ef e5       	ldi	r30, 0x5F	; 95
 254:	fa ee       	ldi	r31, 0xEA	; 234
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCDInit+0x12>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCDInit+0x18>
 25c:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 25e:	9a b1       	in	r25, 0x0a	; 10
 260:	9f 60       	ori	r25, 0x0F	; 15
 262:	9a b9       	out	0x0a, r25	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
 264:	56 9a       	sbi	0x0a, 6	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 266:	20 9a       	sbi	0x04, 0	; 4
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 268:	57 9a       	sbi	0x0a, 7	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 26a:	9b b1       	in	r25, 0x0b	; 11
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	9b b9       	out	0x0b, r25	; 11
	CLEAR_E();
 270:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RW();
 272:	5f 98       	cbi	0x0b, 7	; 11
	CLEAR_RS();
 274:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCDInit+0x34>
 278:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 27a:	5e 9a       	sbi	0x0b, 6	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 27c:	59 9a       	sbi	0x0b, 1	; 11
 27e:	f2 e0       	ldi	r31, 0x02	; 2
 280:	fa 95       	dec	r31
 282:	f1 f7       	brne	.-4      	; 0x280 <LCDInit+0x3c>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCDInit+0x42>
	_delay_us(1);
	CLEAR_E();
 286:	5e 98       	cbi	0x0b, 6	; 11
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	9a 95       	dec	r25
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCDInit+0x46>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCDInit+0x4c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	0e 94 50 00 	call	0xa0	; 0xa0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	8c 60       	ori	r24, 0x0C	; 12
 29c:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	80 e4       	ldi	r24, 0x40	; 64
 2ac:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>
 2b0:	00 e0       	ldi	r16, 0x00	; 0
 2b2:	11 e0       	ldi	r17, 0x01	; 1

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	f8 01       	movw	r30, r16
 2b8:	81 91       	ld	r24, Z+
 2ba:	8f 01       	movw	r16, r30
 2bc:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	00 34       	cpi	r16, 0x40	; 64
 2c4:	1f 07       	cpc	r17, r31
 2c6:	b1 f7       	brne	.-20     	; 0x2b4 <LCDInit+0x70>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	80 e0       	ldi	r24, 0x00	; 0

}
 2cc:	0f 90       	pop	r0
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 2d6:	0c 94 10 01 	jmp	0x220	; 0x220 <LCDGotoXY>

000002da <main>:
// Function prototypes
void init(void);

int main(void) {
	// Initialize the chip
	init();
 2da:	0e 94 4b 00 	call	0x96	; 0x96 <init>
	
	//Clear the screen
	LCDClear();
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>
	
	//Simple string printing
	LCDWriteString("MorseAVR");
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 9f 00 	call	0x13e	; 0x13e <LCDWriteString>
	LCDWriteStringXY(0,1,"Press the button");
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 10 01 	call	0x220	; 0x220 <LCDGotoXY>
 2f6:	89 e4       	ldi	r24, 0x49	; 73
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 9f 00 	call	0x13e	; 0x13e <LCDWriteString>
	//while((PINB & (1 << PB1)));
	
	while(1) {
		if (PINB & (1 << PB1)) {
 2fe:	19 9b       	sbis	0x03, 1	; 3
 300:	07 c0       	rjmp	.+14     	; 0x310 <main+0x36>
			LCDWriteStringXY(1,1,"Pressed");
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 10 01 	call	0x220	; 0x220 <LCDGotoXY>
 30a:	8a e5       	ldi	r24, 0x5A	; 90
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	f5 cf       	rjmp	.-22     	; 0x2fa <main+0x20>
		} else {
			LCDClear();
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 76 00 	call	0xec	; 0xec <LCDByte>
 318:	f2 cf       	rjmp	.-28     	; 0x2fe <main+0x24>

0000031a <__divmodhi4>:
 31a:	97 fb       	bst	r25, 7
 31c:	07 2e       	mov	r0, r23
 31e:	16 f4       	brtc	.+4      	; 0x324 <__divmodhi4+0xa>
 320:	00 94       	com	r0
 322:	07 d0       	rcall	.+14     	; 0x332 <__divmodhi4_neg1>
 324:	77 fd       	sbrc	r23, 7
 326:	09 d0       	rcall	.+18     	; 0x33a <__divmodhi4_neg2>
 328:	0e 94 a1 01 	call	0x342	; 0x342 <__udivmodhi4>
 32c:	07 fc       	sbrc	r0, 7
 32e:	05 d0       	rcall	.+10     	; 0x33a <__divmodhi4_neg2>
 330:	3e f4       	brtc	.+14     	; 0x340 <__divmodhi4_exit>

00000332 <__divmodhi4_neg1>:
 332:	90 95       	com	r25
 334:	81 95       	neg	r24
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	08 95       	ret

0000033a <__divmodhi4_neg2>:
 33a:	70 95       	com	r23
 33c:	61 95       	neg	r22
 33e:	7f 4f       	sbci	r23, 0xFF	; 255

00000340 <__divmodhi4_exit>:
 340:	08 95       	ret

00000342 <__udivmodhi4>:
 342:	aa 1b       	sub	r26, r26
 344:	bb 1b       	sub	r27, r27
 346:	51 e1       	ldi	r21, 0x11	; 17
 348:	07 c0       	rjmp	.+14     	; 0x358 <__udivmodhi4_ep>

0000034a <__udivmodhi4_loop>:
 34a:	aa 1f       	adc	r26, r26
 34c:	bb 1f       	adc	r27, r27
 34e:	a6 17       	cp	r26, r22
 350:	b7 07       	cpc	r27, r23
 352:	10 f0       	brcs	.+4      	; 0x358 <__udivmodhi4_ep>
 354:	a6 1b       	sub	r26, r22
 356:	b7 0b       	sbc	r27, r23

00000358 <__udivmodhi4_ep>:
 358:	88 1f       	adc	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	5a 95       	dec	r21
 35e:	a9 f7       	brne	.-22     	; 0x34a <__udivmodhi4_loop>
 360:	80 95       	com	r24
 362:	90 95       	com	r25
 364:	bc 01       	movw	r22, r24
 366:	cd 01       	movw	r24, r26
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
